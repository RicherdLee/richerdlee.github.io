<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>postgresql日常</title>
    <link href="/2021/06/17/postgresql%E6%97%A5%E5%B8%B8/"/>
    <url>/2021/06/17/postgresql%E6%97%A5%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">version</span>();<br><span class="hljs-keyword">show</span> server_version;<br></code></pre></td></tr></table></figure><h3 id="查询表空间大小"><a href="#查询表空间大小" class="headerlink" title="查询表空间大小"></a>查询表空间大小</h3><h4 id="查询所有数据库大小"><a href="#查询所有数据库大小" class="headerlink" title="查询所有数据库大小"></a>查询所有数据库大小</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> pg_database.datname, pg_database_size(pg_database.datname) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">size</span> <span class="hljs-keyword">from</span> pg_database;<br></code></pre></td></tr></table></figure><h4 id="查询库大小"><a href="#查询库大小" class="headerlink" title="查询库大小"></a>查询库大小</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> pg_size_pretty(pg_database_size(<span class="hljs-string">&#x27;kong&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="清理归档目录"><a href="#清理归档目录" class="headerlink" title="清理归档目录"></a>清理归档目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br> <br>ARCHIVEDIR=&#x27;/pgdata/archive&#x27;<br>CHK_SAFE=$(find $ARCHIVEDIR -type f -mtime +3 -name &#x27;*backup&#x27; -printf &#x27;%f\n&#x27; | sort -r | head -1)<br>cd $ARCHIVEDIR<br>/usr/local/postgres/bin/pg_archivecleanup $ARCHIVEDIR $CHK_SAFE<br> <br>find $ARCHIVEDIR -type f -mtime +3 -a -name &#x27;*backup&#x27; -a ! -newer $CHKPOINT -delete<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>记录日常pg的操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx-tips</title>
    <link href="/2021/04/19/nginx-tips/"/>
    <url>/2021/04/19/nginx-tips/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tex">upstream SERVERHN &#123;<br>    #最少连接<br>    least_conn;<br>    server    172.19.22.167:8890 weight=1;<br>    server    172.19.22.168:8890 weight=1;<br>    server    172.19.22.169:8890 weight=1;<br>    server    172.19.22.175:8890 weight=2; <br>    server    172.19.22.176:8890 weight=2; <br>    #灾备机器<br>    server    120.133.17.60:80 backup;<br>    keepalive 2000;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="least-coon"><a href="#least-coon" class="headerlink" title="least_coon"></a>least_coon</h3><p>首选遍历后端集群，比较每个后端的conns/weight，选取该值最小的后端</p><h3 id="weight"><a href="#weight" class="headerlink" title="weight"></a>weight</h3><p>权重</p><h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>所有节点宕机后启用备用节点</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Nginx解决跨域"><a href="#Nginx解决跨域" class="headerlink" title="Nginx解决跨域"></a>Nginx解决跨域</h2><p>OPTIONS的请求需要返回204状态码，表示允许跨域。  </p><p>浏览器会在接收到OPTIONS的204响应后，再次发起请求。  </p><figure class="highlight plain"><figcaption><span>允许跨域的请求类型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Access-Control-Allow-Methods```">&#96;&#96;&#96;Access-Control-Allow-Headers&#96;&#96;&#96; 允许跨有的headers头  <br><br><br><br>&#96;&#96;&#96;text<br>location &#x2F;ipa&#x2F;monitor&#x2F;common_monitor &#123;<br>   add_header Access-Control-Allow-Origin *;<br>   add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;<br>   add_header Access-Control-Allow-Headers &#39;*&#39;;<br><br>   if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;<br>       return 204;<br>   &#125;<br> <br>   proxy_pass http:&#x2F;&#x2F;SERVERHN&#x2F;monitor&#x2F;common_monitor;<br>   proxy_http_version 1.1;<br>   proxy_set_header   Connection &quot;&quot;;<br>   proxy_set_header   Host    $host;<br>   proxy_set_header   X-Real-IP   $remote_addr;<br>   proxy_set_header   X-Forwarded-Proto  $scheme;<br>   proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;<br>   proxy_intercept_errors on;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux下java性能优化</title>
    <link href="/2021/04/15/Linux%E4%B8%8Bjava%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2021/04/15/Linux%E4%B8%8Bjava%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swarm模式搭建Swarm集群</title>
    <link href="/2021/04/14/Swarm%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BASwarm%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/04/14/Swarm%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BASwarm%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-创建Swarm集群"><a href="#1-创建Swarm集群" class="headerlink" title="1. 创建Swarm集群"></a>1. 创建Swarm集群</h1><h2 id="1-1-创建swarm管理节点"><a href="#1-1-创建swarm管理节点" class="headerlink" title="1.1 创建swarm管理节点"></a>1.1 创建swarm管理节点</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">docker swarm init --advertise-addr 172.19.22.175<br></code></pre></td></tr></table></figure><p>![image-20210414122439594](/Users/lihao/Library/Application Support/typora-user-images/image-20210414122439594.png)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java程序linux下服务卡死</title>
    <link href="/2021/04/13/java%E7%A8%8B%E5%BA%8Flinux%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%8D%A1%E6%AD%BB/"/>
    <url>/2021/04/13/java%E7%A8%8B%E5%BA%8Flinux%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%8D%A1%E6%AD%BB/</url>
    
    <content type="html"><![CDATA[<p>测试服务器上传excel后，出现一段时间的线程卡死。</p><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><p>通过<code>jstack &lt;pid&gt;</code>查看是否有死锁</p><p><img src="/images/WX20210419-092516.png" alt="image-20210419092727116"></p><p>![image-20210419092727116](/Users/lihao/Library/Application Support/typora-user-images/image-20210419092727116.png)</p><p>此处发现出现有一批线程出现了WAITING状态，其等待<code>AbstractQueuedSynchronizer</code> 结合项目中想到springboot的异步线程池出现了阻塞导致后续无法渠道任务，出现线程全部卡死，通过系统错误日志确实出现了OOM</p><p>基本确定了是OOM的问题，则进一步确定是什么原因造成的</p><h2 id="观察GC情况"><a href="#观察GC情况" class="headerlink" title="观察GC情况"></a>观察GC情况</h2><p>通过<code>jstat -gcutil &lt;pid&gt; 5000</code>观察服务GC情况</p><p><img src="/images/WX20210419-092158.png" alt="image-20210419093246720"></p><p>![image-20210419093246720](/Users/lihao/Library/Application Support/typora-user-images/image-20210419093246720.png)</p><p>可以看出频繁的YGC和FullGC</p><h2 id="生成堆转储快照dump文件"><a href="#生成堆转储快照dump文件" class="headerlink" title="生成堆转储快照dump文件"></a>生成堆转储快照dump文件</h2><p>通过<code>jmap -histo &lt;pid&gt;</code>查看实时堆内存</p><p>通过<code>jmap -dump:live,format=b,file=dump.hprof &lt;pid&gt;</code> 并使用mat工具分析堆内存情况</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot-tips</title>
    <link href="/2021/04/09/springboot-tips/"/>
    <url>/2021/04/09/springboot-tips/</url>
    
    <content type="html"><![CDATA[<h1 id="一-定时任务"><a href="#一-定时任务" class="headerlink" title="一.定时任务"></a>一.定时任务</h1><p>springboot启动定时任务需要在启动类上添加<code>@EnableScheduling</code>，并在定时任务方法上设定<code>@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</code>  </p><h2 id="1-yaml配置控制调度"><a href="#1-yaml配置控制调度" class="headerlink" title="1. yaml配置控制调度"></a>1. yaml配置控制调度</h2><p>由于不同环境(本地，测试，生产)对具体调度的需求不同，硬编码式的调度无法满足，需将调度配置写进配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">scheduled:<br>  cron: <span class="hljs-number">0</span>/<span class="hljs-number">5</span> * * * * ?<br></code></pre></td></tr></table></figure><p>然后在<code>@Schedule</code> 中获取配置，并添加默认配置”-“表示默认不执行调度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;$&#123;scheduled.cron:-&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(dateFmt.format(<span class="hljs-keyword">new</span> Date()) + <span class="hljs-string">&quot; : 执行定时任务&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-关闭调度任务"><a href="#2-关闭调度任务" class="headerlink" title="2. 关闭调度任务"></a>2. 关闭调度任务</h2><h3 id="使用”-“方式"><a href="#使用”-“方式" class="headerlink" title="使用”-“方式"></a>使用”-“方式</h3><p>可在yaml配置文件中将调度时间设置为”-“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">scheduled:<br>  cron: <span class="hljs-string">&quot;-&quot;</span><br></code></pre></td></tr></table></figure><h3 id="使用定时开关"><a href="#使用定时开关" class="headerlink" title="使用定时开关"></a>使用定时开关</h3><p>如果想直接将全部定时任务关闭，一个个修改定时任务时间过于麻烦，直接去掉<code>@EnableScheduling</code>又造成代码变动，则可通过springboot中的<code>@Conditional</code>来动态实现此功能</p><p>设置定时调度总开关enable，如果是true则定时任务剩下，否则则不生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">scheduled:<br>  enable: <span class="hljs-keyword">false</span><br>  cron: <span class="hljs-string">&quot;-&quot;</span><br></code></pre></td></tr></table></figure><p><code>@Scheduled</code> 注解，是被一个叫做<code>ScheduledAnnotationBeanPostProcessor</code>的类所拦截的，所以我们可以根据配置，决定是否创建这个 bean，如果没有这个 bean，<code>@Scheduled</code> 就不会被拦截，那么定时任务肯定不会执行了，有了这个思路，实现起来就很简单了。<strong>需要注意的是：这种方式，启动类上面的 @EnableScheduling 需要去掉。</strong></p><p>然后创建一个 ScheduledCondtion 类，配合**@ConditionalOnProperty**，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix=&quot;scheduled&quot;,name = &quot;enable&quot;, havingValue = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ScheduledAnnotationBeanPostProcessor <span class="hljs-title">processor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ScheduledAnnotationBeanPostProcessor();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-定时任务多线程"><a href="#3-定时任务多线程" class="headerlink" title="3. 定时任务多线程"></a>3. 定时任务多线程</h2><p>springboot默认使用的是单线程，通过<code>@EnableScheduling</code>可以看到，引入了SchedulingConfiguration.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Import(&#123;SchedulingConfiguration.class&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableScheduling &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过追踪<code>org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor</code>发现其finishRegistration方法来加载自定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finishRegistration</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.scheduler != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.registrar.setScheduler(<span class="hljs-keyword">this</span>.scheduler);<br>        &#125;<br><span class="hljs-comment">// 1.查找是否有SchedulingConfigurer类型的自定义bean</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.beanFactory <span class="hljs-keyword">instanceof</span> ListableBeanFactory) &#123;<br>            Map&lt;String, SchedulingConfigurer&gt; beans = ((ListableBeanFactory)<span class="hljs-keyword">this</span>.beanFactory).getBeansOfType(SchedulingConfigurer.class);<br>            List&lt;SchedulingConfigurer&gt; configurers = <span class="hljs-keyword">new</span> ArrayList(beans.values());<br>            AnnotationAwareOrderComparator.sort(configurers);<br>            Iterator var3 = configurers.iterator();<br><br>            <span class="hljs-keyword">while</span>(var3.hasNext()) &#123;<br>                SchedulingConfigurer configurer = (SchedulingConfigurer)var3.next();<br>                <span class="hljs-comment">// 1.1使用configureTasks方法给this.registrar初始化</span><br>                configurer.configureTasks(<span class="hljs-keyword">this</span>.registrar);<br>            &#125;<br>        &#125;<br><span class="hljs-comment">// 2.如果未找到自定义SchedulingConfigurer</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.registrar.hasTasks() &amp;&amp; <span class="hljs-keyword">this</span>.registrar.getScheduler() == <span class="hljs-keyword">null</span>) &#123;<br>            Assert.state(<span class="hljs-keyword">this</span>.beanFactory != <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;BeanFactory must be set to find scheduler by type&quot;</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 2.1 查找TaskScheduler类型的bean，不根据名字，初始化taskScheduler</span><br>                <span class="hljs-keyword">this</span>.registrar.setTaskScheduler((TaskScheduler)<span class="hljs-keyword">this</span>.resolveSchedulerBean(<span class="hljs-keyword">this</span>.beanFactory, TaskScheduler.class, <span class="hljs-keyword">false</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (NoUniqueBeanDefinitionException var9) &#123;<br>                <span class="hljs-keyword">this</span>.logger.trace(<span class="hljs-string">&quot;Could not find unique TaskScheduler bean&quot;</span>, var9);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 2.2 查找TaskScheduler类型的bean，根据名字，初始化taskScheduler</span><br>                    <span class="hljs-keyword">this</span>.registrar.setTaskScheduler((TaskScheduler)<span class="hljs-keyword">this</span>.resolveSchedulerBean(<span class="hljs-keyword">this</span>.beanFactory, TaskScheduler.class, <span class="hljs-keyword">true</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException var8) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;<br>                        <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">&quot;More than one TaskScheduler bean exists within the context, and none is named &#x27;taskScheduler&#x27;. Mark one of them as primary or name it &#x27;taskScheduler&#x27; (possibly as an alias); or implement the SchedulingConfigurer interface and call ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: &quot;</span> + var9.getBeanNamesFound());<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException var10) &#123;<br>                <span class="hljs-keyword">this</span>.logger.trace(<span class="hljs-string">&quot;Could not find default TaskScheduler bean&quot;</span>, var10);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">this</span>.registrar.setScheduler(<span class="hljs-keyword">this</span>.resolveSchedulerBean(<span class="hljs-keyword">this</span>.beanFactory, ScheduledExecutorService.class, <span class="hljs-keyword">false</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (NoUniqueBeanDefinitionException var6) &#123;<br>                    <span class="hljs-keyword">this</span>.logger.trace(<span class="hljs-string">&quot;Could not find unique ScheduledExecutorService bean&quot;</span>, var6);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">this</span>.registrar.setScheduler(<span class="hljs-keyword">this</span>.resolveSchedulerBean(<span class="hljs-keyword">this</span>.beanFactory, ScheduledExecutorService.class, <span class="hljs-keyword">true</span>));<br>                    &#125; <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException var5) &#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isInfoEnabled()) &#123;<br>                            <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">&quot;More than one ScheduledExecutorService bean exists within the context, and none is named &#x27;taskScheduler&#x27;. Mark one of them as primary or name it &#x27;taskScheduler&#x27; (possibly as an alias); or implement the SchedulingConfigurer interface and call ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: &quot;</span> + var6.getBeanNamesFound());<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException var7) &#123;<br>                    <span class="hljs-keyword">this</span>.logger.trace(<span class="hljs-string">&quot;Could not find default ScheduledExecutorService bean&quot;</span>, var7);<br>                    <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">&quot;No TaskScheduler/ScheduledExecutorService bean found for scheduled processing&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">this</span>.registrar.afterPropertiesSet();<br>&#125;<br></code></pre></td></tr></table></figure><p>找到bean后，调用<code>afterPropertiesSet</code>方法，使用的是一个单线程模型执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">this</span>.scheduleTasks();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">scheduleTasks</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.taskScheduler == <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">this</span>.localExecutor = Executors.newSingleThreadScheduledExecutor();<br>    <span class="hljs-keyword">this</span>.taskScheduler = <span class="hljs-keyword">new</span> ConcurrentTaskScheduler(<span class="hljs-keyword">this</span>.localExecutor);<br>  &#125;<br>  <span class="hljs-comment">//other code....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由此我们可以自定义一个多线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;scheduled&quot;, name = &quot;enable&quot;, havingValue = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SchedulingConfigurer</span> </span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configureTasks</span><span class="hljs-params">(ScheduledTaskRegistrar scheduledTaskRegistrar)</span> </span>&#123;<br>    scheduledTaskRegistrar.setScheduler(TaskScheduler());<br>  &#125;<br><br>  <span class="hljs-meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Executor <span class="hljs-title">TaskScheduler</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Executors.newScheduledThreadPool(<span class="hljs-number">10</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二-异步任务"><a href="#二-异步任务" class="headerlink" title="二.异步任务"></a>二.异步任务</h1><p>springboot启动定时任务需要在启动类上添加<code>@EnableAsync</code>，并在异步方法上添加<code>Async</code></p><h2 id="1-异步线程池"><a href="#1-异步线程池" class="headerlink" title="1.异步线程池"></a>1.异步线程池</h2><p>通过<code>ThreadPoolTaskExecutor</code>创建异步线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Log4j2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecutorConfig</span>  </span>&#123;<br><br>  <span class="hljs-meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> ThreadPoolTaskExecutor <span class="hljs-title">asyncExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>    ThreadPoolTaskExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolTaskExecutor();<br>    executor.setCorePoolSize(<span class="hljs-number">10</span>);<br>    executor.setMaxPoolSize(<span class="hljs-number">20</span>);<br>    executor.setQueueCapacity(<span class="hljs-number">200</span>);<br>    executor.setKeepAliveSeconds(<span class="hljs-number">60</span>);<br>    executor.setThreadNamePrefix(<span class="hljs-string">&quot;taskExecutor-&quot;</span>);<br>    executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>    <span class="hljs-comment">//核心线程数10：线程池创建时候初始化的线程数</span><br>    executor.setCorePoolSize(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">//最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span><br>    executor.setMaxPoolSize(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//缓冲队列200：用来缓冲执行任务的队列</span><br>    executor.setQueueCapacity(<span class="hljs-number">200</span>);<br>    <span class="hljs-comment">//允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span><br>    executor.setKeepAliveSeconds(<span class="hljs-number">60</span>);<br>    <span class="hljs-comment">//线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</span><br>    executor.setThreadNamePrefix(<span class="hljs-string">&quot;icard-&quot;</span>);<br>    <span class="hljs-comment">//线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span><br>    executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>    executor.initialize();<br>    executor.initialize();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-线程池隔离"><a href="#2-线程池隔离" class="headerlink" title="2.线程池隔离"></a>2.线程池隔离</h2><p>业务上为了避免不同类型异步任务相互影响，需要线程池隔离，通过设置bean的name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(destroyMethod = &quot;shutdown&quot;, name = &quot;common&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ThreadPoolTaskExecutor <span class="hljs-title">asyncExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>ThreadPoolTaskExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolTaskExecutor();<br><span class="hljs-comment">//核心线程数10：线程池创建时候初始化的线程数</span><br>executor.setCorePoolSize(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span><br>executor.setMaxPoolSize(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//缓冲队列200：用来缓冲执行任务的队列</span><br>executor.setQueueCapacity(<span class="hljs-number">200</span>);<br><span class="hljs-comment">//允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span><br>executor.setKeepAliveSeconds(<span class="hljs-number">60</span>);<br><span class="hljs-comment">//线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</span><br>executor.setThreadNamePrefix(<span class="hljs-string">&quot;icard-&quot;</span>);<br><span class="hljs-comment">//线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span><br>executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>executor.initialize();<br><span class="hljs-keyword">return</span> executor;<br>&#125;<br><br><br><span class="hljs-meta">@Bean(destroyMethod = &quot;shutdown&quot;, name = &quot;asyncFile&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ThreadPoolTaskExecutor <span class="hljs-title">asyncFileExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>ThreadPoolTaskExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolTaskExecutor();<br><span class="hljs-comment">//核心线程数10：线程池创建时候初始化的线程数</span><br>executor.setCorePoolSize(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span><br>executor.setMaxPoolSize(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//缓冲队列200：用来缓冲执行任务的队列</span><br>executor.setQueueCapacity(<span class="hljs-number">200</span>);<br><span class="hljs-comment">//允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span><br>executor.setKeepAliveSeconds(<span class="hljs-number">60</span>);<br><span class="hljs-comment">//线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</span><br>executor.setThreadNamePrefix(<span class="hljs-string">&quot;icard-file-&quot;</span>);<br><span class="hljs-comment">//线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span><br>executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>executor.initialize();<br><span class="hljs-keyword">return</span> executor;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>并在使用异步方法时指定bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span><br><span class="hljs-meta">@Async(&quot;asyncFile&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>  log.info(<span class="hljs-string">&quot;test1&quot;</span>);<br>  Thread.sleep(<span class="hljs-number">10000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu16.04部署k8s集群</title>
    <link href="/2021/03/18/ubuntu16-04%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/03/18/ubuntu16-04%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>#安装Docker<br>#安装k8s</p><h2 id="阿里源-安装-kubelet-kubeadm-kubectl-（master和node都需要）"><a href="#阿里源-安装-kubelet-kubeadm-kubectl-（master和node都需要）" class="headerlink" title="阿里源 安装 kubelet kubeadm kubectl （master和node都需要）"></a>阿里源 安装 kubelet kubeadm kubectl （master和node都需要）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装依赖</span><br>sudo apt-get update &amp;&amp; apt-get install -y apt-transport-https<br><span class="hljs-comment"># 加载key</span><br>sudo curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - <br><span class="hljs-comment"># 添加源</span><br>sudo cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list<br>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main<br>EOF<br><span class="hljs-comment"># 安装</span><br>sudo apt-get update<br>sudo apt-get install -y kubelet  kubectl<br></code></pre></td></tr></table></figure><h2 id="关闭swap（交换区）和防火墙，否则会启动失败"><a href="#关闭swap（交换区）和防火墙，否则会启动失败" class="headerlink" title="关闭swap（交换区）和防火墙，否则会启动失败"></a>关闭swap（交换区）和防火墙，否则会启动失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo swapoff -a<br></code></pre></td></tr></table></figure><p>上面命令是临时关闭交换区（立即生效），我们还需要永久关闭交换区，打开fstab文件，注释掉有swap的那一行，然后保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/fstab<br></code></pre></td></tr></table></figure><h2 id="拉取kubernetes初始化镜像"><a href="#拉取kubernetes初始化镜像" class="headerlink" title="拉取kubernetes初始化镜像"></a>拉取kubernetes初始化镜像</h2><p>查看初始镜像要求  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm<span class="hljs-built_in"> config </span>images list<br></code></pre></td></tr></table></figure><p>由于国内无法直接拉取google镜像，可以使用别人的镜像，也可以自己通过阿里云等制作。</p><p>· 设置镜像文件，vim images</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">k8s</span>.gcr.io/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span>=gotok<span class="hljs-number">8</span>s/kube-proxy:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">k8s</span>.gcr.io/kube-controller-manager:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span>=gotok<span class="hljs-number">8</span>s/kube-controller-manager:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">k8s</span>.gcr.io/kube-scheduler:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span>=gotok<span class="hljs-number">8</span>s/kube-scheduler:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">k8s</span>.gcr.io/kube-apiserver:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span>=gotok<span class="hljs-number">8</span>s/kube-apiserver:v<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">k8s</span>.gcr.io/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>=gotok<span class="hljs-number">8</span>s/coredns:<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">k8s</span>.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span>=gotok<span class="hljs-number">8</span>s/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">k8s</span>.gcr.io/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-<span class="hljs-number">0</span>=gotok<span class="hljs-number">8</span>s/etcd:<span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">13</span>-<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>· 拉取镜像脚本 load_images.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>file=<span class="hljs-string">&quot;images&quot;</span><br><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span> found.&quot;</span><br><br>  <span class="hljs-keyword">while</span> IFS=<span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-built_in">read</span> -r key value<br>  <span class="hljs-keyword">do</span><br>    <span class="hljs-comment">#echo &quot;$&#123;key&#125;=$&#123;value&#125;&quot;</span><br>    docker pull <span class="hljs-variable">$&#123;value&#125;</span><br>    docker tag <span class="hljs-variable">$&#123;value&#125;</span> <span class="hljs-variable">$&#123;key&#125;</span><br>    docker rmi <span class="hljs-variable">$&#123;value&#125;</span><br>  <span class="hljs-keyword">done</span> &lt; <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span><br><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span> not found.&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="初始化k8s集群"><a href="#初始化k8s集群" class="headerlink" title="初始化k8s集群"></a>初始化k8s集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init   --kubernetes-version=v1.20.4   --pod-network-cidr=10.244.0.0/16 <br><br><br><span class="hljs-comment">#kubernetes-version 用来指定版本</span><br><span class="hljs-comment">#pod-network-cidr 用于后期采用flannel作为网络组建而准备</span><br><span class="hljs-comment">#apiserver-advertise-address  如果机器上只有单个网卡，可以不进行指定</span><br><br></code></pre></td></tr></table></figure><h2 id="安装flannel网络组件"><a href="#安装flannel网络组件" class="headerlink" title="安装flannel网络组件"></a>安装flannel网络组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml<br><br>kubectl apply -f kube-flannel.yml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mac_docker_k8s安装</title>
    <link href="/2021/02/26/mac-docker-k8s%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/26/mac-docker-k8s%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="macos下docker的k8s安装采坑"><a href="#macos下docker的k8s安装采坑" class="headerlink" title="macos下docker的k8s安装采坑"></a>macos下docker的k8s安装采坑</h1><p>点击 Docker 图标，选择 Preferences… &gt; Kubernetes 进入 Kubernetes 配置页<br><img src="/images/WX20210226-093013.png" alt="k8s"></p><h2 id="k8s一直处于staring状态"><a href="#k8s一直处于staring状态" class="headerlink" title="k8s一直处于staring状态"></a>k8s一直处于staring状态</h2><p>问题在于网络环境导致k8s所需的镜像无法下载   </p><p>将此仓库下载后<br><code>git clone git@github.com:maguowei/k8s-docker-desktop-for-mac.git</code><br>修改images中对应的k8s版本与docker中对应，执行<code>sh load_images.sh</code> 下载本地镜像。 </p><p>下载完毕后，reset k8s依旧是starting状态   </p><p>执行 命令  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf ~<span class="hljs-regexp">/Library/</span>Group\ Containers<span class="hljs-regexp">/group.com.docker/</span>pki/  <br>rm -rf ~/.kube  <br></code></pre></td></tr></table></figure><p>再次rest k8s后，启动成功</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql一次长事务造成的数据不可查询</title>
    <link href="/2021/01/26/mysql%E4%B8%80%E6%AC%A1%E9%95%BF%E4%BA%8B%E5%8A%A1%E9%80%A0%E6%88%90%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%8F%AF%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/01/26/mysql%E4%B8%80%E6%AC%A1%E9%95%BF%E4%BA%8B%E5%8A%A1%E9%80%A0%E6%88%90%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E5%8F%AF%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>##问题描述<br>公司线上数据库在某个周末开始，每天固定时间出现了所有query操作均无响应的情况。<br>##慢慢定位路<br>###数据库连接过多<br>第一反应是否出现过多的数据库连接不释放，通过<code>SHOW FULL PROCESSLIST;</code> 查看后并未出现大量的数据库连接不释放。<br>###事务与死锁<br>思路定位到是否出现了死锁，通过命令<br><code>select * from information_schema.innodb_trx; </code><br><code>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; </code><br><code>SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</code><br>发现了有一批数据处于事务，但没有发现出现死锁现象。进一步通过命令<code>show engine innodb status;</code>确认inndb的状态发现日志中有一部分重要信息  </p><ol><li>8个sql处于事务中，且执行时间很长，此8个均是update和insert<br><code>---TRANSACTION 46157793, ACTIVE 766 sec, thread declared inside InnoDB 5000</code></li><li>其余查询处于队列等待中<br><code>8 queries inside InnoDB, 23 queries in queue</code></li></ol><p>基于这两点基本的思路是发现出现了较长事务导致数据库假死(我个人定义为假死，因为所有sql都不执行)。且并行度就只为8</p><p>###解决思路</p><ol><li>减少长事务，这是首当其冲想到的解决方案，也是业务系统应该优化的地方。但是我们发现出现长事务的的操作集中在几个数据量大的表，说其数据量大，其实也就是2，3百万的数据量，十几个索引。所以个人认为这样的数据量不应该是现阶段的主要矛盾</li><li>再次映入映入眼帘的两个值，<code>---TRANSACTION 46157793, ACTIVE 766 sec, thread declared inside InnoDB 5000</code>中的5000和<code>8 queries inside InnoDB, 23 queries in queue</code>的8</li></ol><h3 id="innodb-thread-concurrency和innodb-concurrency-tickets"><a href="#innodb-thread-concurrency和innodb-concurrency-tickets" class="headerlink" title="innodb_thread_concurrency和innodb_concurrency_tickets"></a>innodb_thread_concurrency和innodb_concurrency_tickets</h3><p>通过翻阅资料两个参数引起了我的注意</p><h4 id="innodb-thread-concurrency"><a href="#innodb-thread-concurrency" class="headerlink" title="innodb_thread_concurrency"></a>innodb_thread_concurrency</h4><p><code>INNODB存储引擎中允许的最大的线程并发数</code>简单明了最大并行度，这也对应了8这个值，即8个长事务导致并行度没有了，其他sql无法执行。当期设置为0是，标示不限制</p><h4 id="innodb-concurrency-tickets"><a href="#innodb-concurrency-tickets" class="headerlink" title="innodb_concurrency_tickets"></a>innodb_concurrency_tickets</h4><p><code>表示事务消耗凭证，每次执行一次sql都消耗一次凭证</code>，这里就涉及到小事务饥饿的问题</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx跨域cors</title>
    <link href="/2021/01/21/nginx%E8%B7%A8%E5%9F%9Fcors/"/>
    <url>/2021/01/21/nginx%E8%B7%A8%E5%9F%9Fcors/</url>
    
    <content type="html"><![CDATA[<p>#什么是跨域<br>#nginx跨域最终解决</p><p>OPTIONS的请求需要返回204状态码，表示允许跨域。<br>浏览器会在接收到OPTIONS的204响应后，再次发起请求。  </p><figure class="highlight plain"><figcaption><span>允许跨域的请求类型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Access-Control-Allow-Methods```">&#96;&#96;&#96;Access-Control-Allow-Headers&#96;&#96;&#96; 允许跨有的headers头  <br><br><br></code></pre></td></tr></table></figure><p>location /ipa/monitor/common_monitor {</p><pre><code>   add_header Access-Control-Allow-Origin *;   add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;   add_header Access-Control-Allow-Headers &#39;*&#39;;   if ($request_method = &#39;OPTIONS&#39;) &#123;       return 204;   &#125;   proxy_pass http://SERVERHN/monitor/common_monitor;   proxy_http_version 1.1;   proxy_set_header   Connection &quot;&quot;;   proxy_set_header   Host    $host;   proxy_set_header   X-Real-IP   $remote_addr;   proxy_set_header   X-Forwarded-Proto  $scheme;   proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;   proxy_intercept_errors on;&#125;</code></pre><p>```</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>追踪django项目下接口阻塞问题</title>
    <link href="/2020/12/17/%E8%BF%BD%E8%B8%AAdjango%E9%A1%B9%E7%9B%AE%E4%B8%8B%E6%8E%A5%E5%8F%A3%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/17/%E8%BF%BD%E8%B8%AAdjango%E9%A1%B9%E7%9B%AE%E4%B8%8B%E6%8E%A5%E5%8F%A3%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司一个django项目出现固定接口阻塞问题</p><h1 id="问题追踪"><a href="#问题追踪" class="headerlink" title="问题追踪"></a>问题追踪</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>当线上出现接口阻塞卡住时，通过测试服务连接线上库，测试服务接口未出现阻塞，基本排除数据库问题。</p><h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>通过nginx负载均衡，提高后端服务数量，并未出现明显效果提升</p><h1 id="分析python性能"><a href="#分析python性能" class="headerlink" title="分析python性能"></a>分析python性能</h1><h2 id="py-spy"><a href="#py-spy" class="headerlink" title="py-spy"></a>py-spy</h2><p>基于之前通过jstack对java线程分析，使用py-spy分析线上代码，查找出现性能问题的地方.</p><h2 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h2><p>通过命令py-spy record -o profile.svg -p ${pid}生成的火焰图查看(也可以通过py-spy top -p ${pid})<br>只能用最高的是logging日志和django的reload</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>追踪服务器自动重启问题</title>
    <link href="/2020/12/07/%E8%BF%BD%E8%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/07/%E8%BF%BD%E8%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>#现象<br>近期gitlab频繁出现无法登录，代码无法提交的现象。登录服务器后发现整个docker服务出现了重启，期初认为是某个容器异常导致docker服务重启。<br>#追踪docker服务<br>通过命令<code>journalctl -fu docker.service</code>查看docker的服务发现，docker服务并没有因为异常而重启，而是<code>正常重启</code><br><img src="/images/WX20201207-093317.png"><br>#追踪系统日志<br>无法确认docker容器是因为异常重启，则将目标转到linux的系统日志，竟然发现系统日志sys.log中出现了reboot的日志。<br><code>localhost cron[1165]: (CRON) INFO (Running @reboot jobs)，</code><br>赶紧将<code>crontab -l</code>打开查看，并未发现有重启服务的调度。最终在<code>/etc/cron.d</code>下发现<code>mdadm</code>的一条定时任务<code>57 0 * * 0 root if [ -x /usr/share/mdadm/checkarray ] &amp;&amp; [ $(date +\%d) -le 7 ]; then /usr/share/mdadm/checkarray --cron --all --idle --quiet; fi</code>，难道是硬盘raid出现了问题了？<br>#备份docker容器<br>为了避免由于硬盘的问题导致git的丢失，赶紧通过docker相关命令将容器备份起来<br><img src="/images/WX20201207-095148.png">  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>剖析slf4j原理并实现自己的日志框架</title>
    <link href="/2020/11/19/%E5%89%96%E6%9E%90slf4j%E5%8E%9F%E7%90%86%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/11/19/%E5%89%96%E6%9E%90slf4j%E5%8E%9F%E7%90%86%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h1><p>为了解决不同系统日志存储在不同节点甚至docker容器内，不方便查看，缺乏统一规范，需要一套统一日志采集方案。ELK做为第一个想到的框架，其有成熟的解决方案的优势，但思考后觉本身还是要对系统的日志文件采集后写入ES，并未解决日志储存无统一规范的问题，且需要为每个节点的每一个系统日志配置logstash的解析。因此想通过JAVA成熟的日志框架，将统一日志采集直接植入日常开发中，减少额外工作。</p><h1 id="Java日志框架"><a href="#Java日志框架" class="headerlink" title="Java日志框架"></a>Java日志框架</h1><h2 id="日志门面"><a href="#日志门面" class="headerlink" title="日志门面"></a>日志门面</h2><p><font color= red >SLF4J</font> 是java中的日志门面，即提供一套通用的接口，具体的实现可有开发者自有选择</p><h2 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h2><h2 id="SLF4J-Simple-Logging-Facade-for-JAVA"><a href="#SLF4J-Simple-Logging-Facade-for-JAVA" class="headerlink" title="SLF4J(Simple Logging Facade for JAVA)"></a>SLF4J(Simple Logging Facade for JAVA)</h2><h3 id="slf4j源码分析"><a href="#slf4j源码分析" class="headerlink" title="slf4j源码分析"></a>slf4j源码分析</h3><ul><li>通过工厂获取去logger实例  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> lihao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/11/19 14:43</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoggerTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger logger = LoggerFactory.getLogger(LoggerTest.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;LoggerTest&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>getLogger()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Logger <span class="hljs-title">getLogger</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        ILoggerFactory iLoggerFactory = getILoggerFactory();<br>        <span class="hljs-keyword">return</span> iLoggerFactory.getLogger(name);<br>    &#125;<br><br></code></pre></td></tr></table></figure><ul><li>getILoggerFactory() , 判断实例是否存在，并通过单例模式生成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ILoggerFactory <span class="hljs-title">getILoggerFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;<br>            <span class="hljs-keyword">synchronized</span> (LoggerFactory.class) &#123;<br>                <span class="hljs-keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;<br>                    INITIALIZATION_STATE = ONGOING_INITIALIZATION;<br>                    performInitialization();<br>                &#125;<br>            &#125;<br>        &#125;<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>performInitialization()-&gt;bind(),</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bind</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">// skip check under android, see also</span><br>            <span class="hljs-comment">// http://jira.qos.ch/browse/SLF4J-328</span><br>            <span class="hljs-keyword">if</span> (!isAndroid()) &#123;<br>                staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();<br>                reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);<br>            &#125;<br>            ...<br>        &#125; <br>    &#125;<br><br>```  <br><br>* findPossibleStaticLoggerBinderPathSet()，通过classloader获取名为“org/slf4j/impl/StaticLoggerBinder.class”的类<br><br>```java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String STATIC_LOGGER_BINDER_PATH = <span class="hljs-string">&quot;org/slf4j/impl/StaticLoggerBinder.class&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Set&lt;URL&gt; <span class="hljs-title">findPossibleStaticLoggerBinderPathSet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// use Set instead of list in order to deal with bug #138</span><br>        <span class="hljs-comment">// LinkedHashSet appropriate here because it preserves insertion order</span><br>        <span class="hljs-comment">// during iteration</span><br>        Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="hljs-keyword">new</span> LinkedHashSet&lt;URL&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ClassLoader loggerFactoryClassLoader = LoggerFactory.class.getClassLoader();<br>            Enumeration&lt;URL&gt; paths;<br>            <span class="hljs-keyword">if</span> (loggerFactoryClassLoader == <span class="hljs-keyword">null</span>) &#123;<br>                paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);<br>            &#125;<br>            <span class="hljs-keyword">while</span> (paths.hasMoreElements()) &#123;<br>                URL path = paths.nextElement();<br>                staticLoggerBinderPathSet.add(path);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            Util.report(<span class="hljs-string">&quot;Error getting resources from path&quot;</span>, ioe);<br>        &#125;<br>        <span class="hljs-keyword">return</span> staticLoggerBinderPathSet;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>找到项目中使用的日志jar,slf4j-log4j12的org/slf4j/impl/StaticLoggerBinder.class</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticLoggerBinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LoggerFactoryBinder</span> </span>&#123;<br>....<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="自有日志框架"><a href="#自有日志框架" class="headerlink" title="自有日志框架"></a>自有日志框架</h1><h2 id="框架架构"><a href="#框架架构" class="headerlink" title="框架架构"></a>框架架构</h2><p><img src="/images/WX20201124-161630.png">  </p><ul><li>测试类   </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLogger</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger logger = LoggerFactory.getLogger(TestLogger.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        logger.info(<span class="hljs-string">&quot;TestLogger&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现1，简单实现info的打印"><a href="#实现1，简单实现info的打印" class="headerlink" title="实现1，简单实现info的打印"></a>实现1，简单实现info的打印</h2><ul><li>StaticLoggerBinder，单例构建YHSimpleLogFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticLoggerBinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LoggerFactoryBinder</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ILoggerFactory loggerFactory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String loggerFactoryClassStr = LoggerFactoryBinder.class.getName();<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">StaticLoggerBinder</span><span class="hljs-params">()</span> </span>&#123;<br>        loggerFactory = <span class="hljs-keyword">new</span> YHSimpleLogFactory();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ILoggerFactory <span class="hljs-title">getLoggerFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> loggerFactory;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLoggerFactoryClassStr</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> loggerFactoryClassStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> StaticLoggerBinder SINGLETON = <span class="hljs-keyword">new</span> StaticLoggerBinder();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the StaticLoggerBinder singleton</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> StaticLoggerBinder <span class="hljs-title">getSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> SINGLETON;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>YHSimpleLogFactory，使用ConcurrentMap，为每一个类只构建一个logger实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YHSimpleLogFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILoggerFactory</span> </span>&#123;<br><br>    ConcurrentMap&lt;String, Logger&gt; loggerMap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">YHSimpleLogFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        loggerMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;String, Logger&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Logger <span class="hljs-title">getLogger</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        Logger slf4jLogger = loggerMap.get(name);<br>        <span class="hljs-keyword">if</span> (slf4jLogger != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> slf4jLogger;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            slf4jLogger = <span class="hljs-keyword">new</span> YHSimpleLogger(name);<br>            Logger oldInstance = loggerMap.putIfAbsent(name, slf4jLogger);<br>            <span class="hljs-keyword">return</span> oldInstance == <span class="hljs-keyword">null</span> ? slf4jLogger : oldInstance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>YHSimpleLogger</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YHSimpleLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Logger</span></span>&#123;<br> <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">YHSimpleLogger</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        System.out.println(String.format(<span class="hljs-string">&quot;%s,%s&quot;</span>, <span class="hljs-keyword">this</span>.name, msg));<br>    &#125;<br><span class="hljs-comment">/*省略待实现方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最终输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.TestLogger,TestLogger<br></code></pre></td></tr></table></figure><h1 id="实现2，数据写入kafka"><a href="#实现2，数据写入kafka" class="headerlink" title="实现2，数据写入kafka"></a>实现2，数据写入kafka</h1><p>将实现1中的日志直接打印，改为写入kafka队列，可为每个类建立一个kafka producer</p><ul><li>YHSimpleKafkaLogFactory，此处要排除kafka中的log。因为是实验项目，所以使用了比较low的方法，直接对于kafka的日志，使用简单打印</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YHSimpleKafkaLogFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILoggerFactory</span> </span>&#123;<br><br>    ConcurrentMap&lt;String, Logger&gt; loggerMap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">YHSimpleKafkaLogFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        loggerMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;String, Logger&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Logger <span class="hljs-title">getLogger</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        Logger slf4jLogger = loggerMap.get(name);<br>        <span class="hljs-comment">//对kafka自身的log，使用YHSimpleLogger</span><br><br><br>        <span class="hljs-keyword">if</span> (slf4jLogger != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> slf4jLogger;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;org.apache.kafka&quot;</span>)) &#123;<br>                slf4jLogger = <span class="hljs-keyword">new</span> YHSimpleLogger(name);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                slf4jLogger = <span class="hljs-keyword">new</span> YHSimpleKafkaLogger(name);<br>            &#125;<br><br>            Logger oldInstance = loggerMap.putIfAbsent(name, slf4jLogger);<br>            <span class="hljs-keyword">return</span> oldInstance == <span class="hljs-keyword">null</span> ? slf4jLogger : oldInstance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>YHSimpleKafkaLogger，构建时实例化kafka producer</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YHSimpleKafkaLogger</span> <span class="hljs-title">implements</span> <span class="hljs-title">Logger</span> &#123;</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> TOPIC = <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> BROKER_LIST = <span class="hljs-string">&quot;192.168.3.123:9092&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> KafkaProducer&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; producer = null;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">YHSimpleKafkaLogger</span><span class="hljs-params">(<span class="hljs-keyword">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST);<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.ACKS_CONFIG, <span class="hljs-string">&quot;all&quot;</span>);<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.RETRIES_CONFIG, <span class="hljs-number">0</span>);<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.BATCH_SIZE_CONFIG, <span class="hljs-number">16384</span>);<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.LINGER_MS_CONFIG, <span class="hljs-number">1</span>);<br>        properties.<span class="hljs-built_in">put</span>(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="hljs-number">33554432</span>);<br><br>        producer = <span class="hljs-keyword">new</span> KafkaProducer&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(properties);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(<span class="hljs-keyword">String</span> msg)</span> </span>&#123;<br><br>        <span class="hljs-keyword">String</span> str = <span class="hljs-keyword">String</span>.format(<span class="hljs-string">&quot;%s,%s&quot;</span>, <span class="hljs-keyword">this</span>.name, msg);<br>        System.out.<span class="hljs-built_in">println</span>(str);<br>        producer.send(<span class="hljs-keyword">new</span> ProducerRecord&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt;(TOPIC, null, str));<br>        producer.<span class="hljs-built_in">flush</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">/*省略待实现方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>监听kafka队列，输出<br><img src="/images/WX20201124-175549.png"></li></ul><h2 id="实现3，基于kakfa的log4jappender将日志写入kafa队列"><a href="#实现3，基于kakfa的log4jappender将日志写入kafa队列" class="headerlink" title="实现3，基于kakfa的log4jappender将日志写入kafa队列"></a>实现3，基于kakfa的log4jappender将日志写入kafa队列</h2><p>引入maven依赖  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;<br>        &lt;artifactId&gt;kafka-log4j-appender&lt;/artifactId&gt;<br>        &lt;version&gt;2.4.0&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>编写日志配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">log4j.rootLogger=warn,stdout,KAFKA<br><br># stdout配置<br>log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>log4j.appender.stdout.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH\:mm\:ss&#125; [%p]-[%c] %m%n<br>#日志输出<br>log4j.appender.logfile=org.apache.log4j.FileAppender<br>log4j.appender.logfile.File=logs/test.log<br>log4j.appender.logfile.layout=org.apache.log4j.PatternLayout<br>log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n<br><br># kafka配置<br>#定义一个名为kafka 为Appender<br>log4j.appender.KAFKA=org.apache.kafka.log4jappender.KafkaLog4jAppender<br>#指定日志写入到Kafka的主题<br>log4j.appender.KAFKA.topic=test<br>#制定连接kafka的地址<br>log4j.appender.KAFKA.brokerList=<span class="hljs-number">192.168</span>.<span class="hljs-number">3.123</span>:<span class="hljs-number">9092</span><br>#压缩方式，默认为none<br>log4j.appender.KAFKA.compressionType=none<br>#指定Producer发送消息的方式，默认是false，即异步发送<br>log4j.appender.KAFKA.syncSend=<span class="hljs-keyword">true</span><br>#指定日志级别<br>log4j.appender.KAFKA.Threshold=info<br>log4j.appender.KAFKA.layout=org.apache.log4j.PatternLayout<br>log4j.appender.KAFKA.ignoreExceptions=<span class="hljs-keyword">false</span><br>##kafka与服务端阻塞时长，超时则通过Failover Appender输出<br>log4j.appender.KAFKA.maxBlockMs=<span class="hljs-number">1000</span><br>log4j.appender.KAFKA.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-<span class="hljs-number">5</span>p %c&#123;<span class="hljs-number">1</span>&#125;:%L %% - %m%n<br><br>#Failover<br>log4j.appender.Failover=Failover<br>log4j.appender.primary=KAFKA<br>log4j.appender.appenders=logfile<br></code></pre></td></tr></table></figure><font color= red >    注意      1 log4j.rootLogger为warn，不可为info否则会出现deadlock，后续解释      2 开启异步发送    log4j.appender.KAFKA.syncSend=true      3 开启Failover，当kafkaappender异常时将异常写入本地文件      4 减少与kafka服务端交互时间过长导致阻塞主业务，log4j.appender.KAFKA.maxBlockMs=1000</font> <h3 id="kafkalog4jappender死锁"><a href="#kafkalog4jappender死锁" class="headerlink" title="kafkalog4jappender死锁"></a>kafkalog4jappender死锁</h3><p>启动日志测试程序后，出现程序卡死情况，通过<code>jstack 45978</code>追踪进程发现出现deadlock<br><img src="/images/WX20201125-195450.png">  </p><p>可以看出<br>kafka线程想要获取0x0000000797610830锁，同时持有0x00000007976105d8<br>main主线程想要获取0x00000007976105d8锁，同时持有0x00000007976105d8，0x0000000797610748，0x0000000797610830<br>出现死锁，&lt;0x0000000797610830&gt; (a org.apache.log4j.spi.RootLogger)  &lt;0x00000007976105d8&gt; (a org.apache.kafka.clients.producer.internals.ProducerMetadata)<br>有人已经提问过<a href="https://github.com/apache/kafka/pull/4375">KafkaLog4jAppender deadlocks when logging from producer network thread</a><br><code>at org.apache.kafka.clients.Metadata.update(Metadata.java:261)</code> 显示由261行开始再次申请org.apache.log4j.spi.RootLogger导致死锁</p><p>将org.apache.kafka.clients.Metadata的日志权限提高至WARN,致使其不会打印INFO<br><code>log4j.logger.org.apache.kafka.clients.Metadata=WARN</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux内存机制以及手动释放swap和内存</title>
    <link href="/2020/10/29/Linux%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BEswap%E5%92%8C%E5%86%85%E5%AD%98/"/>
    <url>/2020/10/29/Linux%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BEswap%E5%92%8C%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>近期收到zabbix不断报警，一台服务器出现swap不足。</p><h1 id="Linux-swap机制"><a href="#Linux-swap机制" class="headerlink" title="Linux swap机制"></a>Linux swap机制</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Linux divides its physical RAM (random access memory) into chucks of memory called pages. Swapping is the process whereby a<span class="hljs-built_in"> page </span>of memory is copied <span class="hljs-keyword">to</span> the preconfigured space on the hard disk, called swap space, <span class="hljs-keyword">to</span> free up that<span class="hljs-built_in"> page </span>of memory. The combined sizes of the physical memory <span class="hljs-keyword">and</span> the swap space is the amount of virtual memory available.<br><br>Swap space <span class="hljs-keyword">in</span> Linux is used when the amount of physical memory (RAM) is full. <span class="hljs-keyword">If</span> the<span class="hljs-built_in"> system </span>needs more memory resources <span class="hljs-keyword">and</span> the RAM is full, inactive pages <span class="hljs-keyword">in</span> memory are moved <span class="hljs-keyword">to</span> the swap space. <span class="hljs-keyword">While</span> swap space can help machines with a small amount of RAM, it should <span class="hljs-keyword">not</span> be considered a replacement <span class="hljs-keyword">for</span> more RAM. Swap space is located on hard drives, which have a slower access time than physical memory.Swap space can be a dedicated swap partition (recommended), a swap file, <span class="hljs-keyword">or</span> a combination of swap partitions <span class="hljs-keyword">and</span> swap files.<br><br> <br><br>Linux内核为了提高读写效率与速度，会将文件在内存中进行缓存，这部分内存就是Cache Memory(缓存内存)。即使你的程序运行结束后，Cache Memory也不会自动释放。这就会导致你在Linux系统中程序频繁读写文件后，你会发现可用物理内存变少。当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap分区中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。<br></code></pre></td></tr></table></figure><p>简单来说就是为了提高内核读写效率，会对文件进行内存缓存，但是内存空间有限，就会将一部分数据放在硬盘上，当程序需要再次使用到这部分数据，会将其恢复到内存中。</p><h1 id="swap使用定位"><a href="#swap使用定位" class="headerlink" title="swap使用定位"></a>swap使用定位</h1><p>通过命令<code>free -m</code>，查看当前服务器swap的使用情况<br><img src="/images/WX20201102-090705.png"><br>在进程目录下，/proc/${PID}/smaps文件中记录着swap的使用情况，通过命令<br><code>for i in $(ls /proc | grep &quot;^[0-9]&quot; | awk &#39;$0&gt;100&#39;); do awk &#39;/Swap:/&#123;a=a+$2&#125;END&#123;print &#39;&quot;$i&quot;&#39;,a/1024&quot;M&quot;&#125;&#39; /proc/$i/smaps;done| sort -k2nr | head</code><br>查看系统中swap各进程占用<br><img src="/images/WX20201102-091129.png"><br>在查看具体进程<code>ps -ef|grep $&#123;PID&#125;</code><br>(之前有一个4040的java程序占用最高600多M，由于着急恢复系统，所以没有截图，暂时拿另一个java的进行记录说明)<br><img src="/images/WX20201102-091443.png"><br>发现是一个java程序，由于我们的服务都是跑在docker中的，所以需要定位具体是哪个docker容器中的java造成的<br>通过docker命令<code>docker top &lt;容器id&gt;</code>可以查看容器内的各个进程<br><img src="/images/WX20201102-091732.png">  </p><h1 id="手动释放swap"><a href="#手动释放swap" class="headerlink" title="手动释放swap"></a>手动释放swap</h1><p>通过命令<code>swapon -s</code>可以查看到swap的挂载情况<br><img src="/images/WX20201029-092628.png"><br>通过命令<code>swapoff 挂载目录</code>将其释放到内存中，此时要保证内存空间充足，否则会造成死机  </p><h1 id="Java程序造成swap高的定位"><a href="#Java程序造成swap高的定位" class="headerlink" title="Java程序造成swap高的定位"></a>Java程序造成swap高的定位</h1><p>通过程序日志发现，容器内部出现了无法解析数据库域名的情况(此情况在我们多个java服务都出现，似乎是docker容器的问题，暂时没找到具体问题和解决方案，只能通过重启服务解决)<br><img src="/images/WX20201102-092554.png"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>zabbix</title>
    <link href="/2020/10/10/zabbix/"/>
    <url>/2020/10/10/zabbix/</url>
    
    <content type="html"><![CDATA[<h1 id="docker部署zabbix-server"><a href="#docker部署zabbix-server" class="headerlink" title="docker部署zabbix-server"></a>docker部署zabbix-server</h1><h2 id="部署MySQL数据库"><a href="#部署MySQL数据库" class="headerlink" title="部署MySQL数据库"></a>部署MySQL数据库</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name mysql-server -t \<br>      -e <span class="hljs-attribute">MYSQL_DATABASE</span>=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e <span class="hljs-attribute">MYSQL_USER</span>=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e <span class="hljs-attribute">MYSQL_PASSWORD</span>=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=<span class="hljs-string">&quot;zabbix&quot;</span> \<br>      -d mysql:5.7  \<br><span class="hljs-attribute">--character-set-server</span>=utf8 <span class="hljs-attribute">--collation-server</span>=utf8_bin<br></code></pre></td></tr></table></figure><h2 id="部署zabbix-server"><a href="#部署zabbix-server" class="headerlink" title="部署zabbix-server"></a>部署zabbix-server</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haml">docker run --name zabbix-server-mysql -t \<br>      -<span class="ruby">e DB_SERVER_HOST=<span class="hljs-string">&quot;mysql-server&quot;</span> \</span><br><span class="ruby">      -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      --link mysql-<span class="hljs-symbol">server:</span>mysql \</span><br><span class="ruby">      -p <span class="hljs-number">10051</span><span class="hljs-symbol">:</span><span class="hljs-number">10051</span> \</span><br><span class="ruby">      -d zabbix/zabbix-server-<span class="hljs-symbol">mysql:</span>latest</span><br></code></pre></td></tr></table></figure><h2 id="部署web-nginx-连接到zabbix和mysql"><a href="#部署web-nginx-连接到zabbix和mysql" class="headerlink" title="部署web nginx 连接到zabbix和mysql"></a>部署web nginx 连接到zabbix和mysql</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haml">docker run --name zabbix-web-nginx-mysql -t \<br>      -<span class="ruby">e DB_SERVER_HOST=<span class="hljs-string">&quot;mysql-server&quot;</span> \</span><br><span class="ruby">      -e MYSQL_DATABASE=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      -e MYSQL_USER=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      -e MYSQL_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;zabbix&quot;</span> \</span><br><span class="ruby">      --link mysql-<span class="hljs-symbol">server:</span>mysql \</span><br><span class="ruby">      --link zabbix-server-<span class="hljs-symbol">mysql:</span>zabbix-server \</span><br><span class="ruby">      -p <span class="hljs-number">8080</span><span class="hljs-symbol">:</span><span class="hljs-number">80</span> \</span><br><span class="ruby">      -d zabbix/zabbix-web-nginx-<span class="hljs-symbol">mysql:</span>latest</span><br></code></pre></td></tr></table></figure><h2 id="修改Web中文乱码"><a href="#修改Web中文乱码" class="headerlink" title="修改Web中文乱码"></a>修改Web中文乱码</h2><p>下载<a href="https://freefontsdownload.net/free-simkai-font-137629.htm">中文字体</a><br>覆盖至容器zabbix-web-nginx-mysql:/usr/share/zabbix/assets/fonts/DejaVuSans.ttf  </p><h1 id="zabbix-agent安装"><a href="#zabbix-agent安装" class="headerlink" title="zabbix-agent安装"></a>zabbix-agent安装</h1><h2 id="添加zabbix-agent-Repository-Ubuntu-16-04"><a href="#添加zabbix-agent-Repository-Ubuntu-16-04" class="headerlink" title="添加zabbix-agent Repository(Ubuntu 16.04)"></a>添加zabbix-agent Repository(Ubuntu 16.04)</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>repo.zabbix.com<span class="hljs-regexp">/zabbix/</span><span class="hljs-number">4.0</span><span class="hljs-regexp">/ubuntu/</span>pool<span class="hljs-regexp">/main/</span>z<span class="hljs-regexp">/zabbix-release/</span>zabbix-release_4.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>+xenial_all.deb <br>dpkg -i zabbix-release_4.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>+xenial_all.deb<br></code></pre></td></tr></table></figure><h2 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix-agent"></a>安装zabbix-agent</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update<br>apt-<span class="hljs-builtin-name">get</span> install zabbix-agent<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>zabbix/zabbix_agentd.conf<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">LogFile</span>=/tmp/zabbix_agentd.log <br><br><span class="hljs-attr">PidFile</span>=/tmp/zabbix_agentd.pid<br><span class="hljs-comment">#server端ip</span><br><span class="hljs-attr">Server</span>=******<br><br><span class="hljs-attr">ListenPort</span>=<span class="hljs-number">10050</span><br><br><span class="hljs-attr">StartAgents</span>=<span class="hljs-number">5</span><br><br><span class="hljs-comment">#ServerActive=192.168.0.81 #注释掉主动模式的配置</span><br><br><br><span class="hljs-attr">Timeout</span>=<span class="hljs-number">30</span><br><br><span class="hljs-attr">Include</span>=/etc/zabbix/zabbix_agentd.d/*.conf<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> zabbix-agent.service <br></code></pre></td></tr></table></figure><h2 id="监控配置"><a href="#监控配置" class="headerlink" title="监控配置"></a>监控配置</h2><h3 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h3><p><img src="/images/WX20201010-112402.png" alt="配置主机"></p><h2 id="Web网页监控"><a href="#Web网页监控" class="headerlink" title="Web网页监控"></a>Web网页监控</h2><p>主机-&gt;web场景-&gt;创建web场景  </p><ol><li>场景<br><img src="/images/WX20201010-134325.png" alt="web监测">  </li><li>步骤<br><img src="/images/WX20201010-134718.png" alt="web监测"></li></ol><h2 id="监控nginx状态码"><a href="#监控nginx状态码" class="headerlink" title="监控nginx状态码"></a>监控nginx状态码</h2><h3 id="创建nginx-access日志解析脚本"><a href="#创建nginx-access日志解析脚本" class="headerlink" title="创建nginx access日志解析脚本"></a>创建nginx access日志解析脚本</h3><p>每5分钟处理一次当日access日志，记录状态码和次数写入access.code.log文件  </p><ul><li>对于docker内的nginx，使用-i而不是用-it  </li><li>生成的access.code.log需要授权给zabbix否则会出现无权限异常  </li><li>添加zabbix到docker组，否则无权限执行docker命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/zabbix/zabbix_agentd.d<br>vim access.log.sh <br></code></pre></td></tr></table></figure><ul><li>编写日志采集脚本  </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>rm -rf /etc/zabbix/zabbix_agentd.d/access.code.log 2&gt;&amp;1 &gt; /dev/null<br>date=`date &quot;+%d/%b/%Y:%H:&quot; -d &quot;5 min ago&quot;`<br>today=`date &quot;+%Y-%m-%d&quot;`<br>logpath=/var/log/nginx/access-$today.log<br>dockerName=nginx<br>docker exec -i nginx grep &quot;$date&quot; $logpath|awk -F &#x27; &#x27; &#x27;&#123;print $9&#125;&#x27; |awk  &#x27;&#123;sum[$1]+=1&#125;END&#123;for(c in sum)&#123;print c&quot;|&quot;sum[c]&#125;&#125;&#x27; &gt; /etc/zabbix/zabbix_agentd.d/access.code.log<br><br>chown -Rf zabbix.zabbix /etc/zabbix/zabbix_agentd.d/access.code.log<br><br>echo 1<br><br></code></pre></td></tr></table></figure><ul><li>编写zabbix方法脚本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim access.code.sh <br></code></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br><span class="hljs-meta">#</span><span class="bash">以下来定义函数方便 UserParameter 调用</span><br>function c_200 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;200|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_202 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;202|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_301 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;301|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_302 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;302|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_304 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;304|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_400 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;400|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_403 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;403|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_404 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;404|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_405 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;405|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_502 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;502|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_503 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;503|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br>function c_504 &#123;<br>        cat /etc/zabbix/zabbix_agentd.d/access.code.log|grep &quot;504|&quot;|awk -F &#x27;|&#x27; &#x27;&#123;print $2&#125;&#x27;<br>&#125;<br><br><span class="hljs-meta">$</span><span class="bash">1</span><br></code></pre></td></tr></table></figure><ul><li>添加zabbix监控配置   </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim userparameter_nginx_access.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">UserParameter=access.log,/etc/zabbix/zabbix_agentd.d/access.log.sh<br>UserParameter=access.code[*],/etc/zabbix/zabbix_agentd.d/access.code.sh $1<br></code></pre></td></tr></table></figure><h3 id="配置zabbix监控项"><a href="#配置zabbix监控项" class="headerlink" title="配置zabbix监控项"></a>配置zabbix监控项</h3><ol><li>创建模板<br>配置-&gt;模板-&gt;创建模板  </li><li>创建监控项<br>模板-&gt;监控项-&gt;创建监控项  </li><li>创建日志收集监控<br><img src="/images/WX20201010-141442.png" alt="收集监控">  </li><li>创建code码监控<br><img src="/images/WX20201010-141549.png" alt="code监控">  </li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx upstream prematurely closed connection while reading response header from upstream问题排查</title>
    <link href="/2020/09/11/Nginx-upstream-prematurely-closed-connection-while-reading-response-header-from-upstream%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <url>/2020/09/11/Nginx-upstream-prematurely-closed-connection-while-reading-response-header-from-upstream%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>线上nginx偶尔会出现<code>upstream prematurely closed connection while reading response header from upstream</code><br>即请求被上游服务关闭了。<br>查看nginx配置可发现配置了长连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">keepalive <span class="hljs-number">16</span>;<br></code></pre></td></tr></table></figure><p>nginx长连接是指，每个work建立一个http连接池，避免每个请求都建立socket连接使用完毕后释放造成系统调用的浪费。此类长连接在请求完毕后归还连接池。这个长连接的保持时间是有keepalive_timeout设置的，即连接超过这个时长，会被释放掉。<br>那么问题基本就定位到，<font size=6> 恰好一次请求由于时间过长，正好在其返回结果前连接被释放掉了。</font><br><font color=red>那么就有一个问题，当设定了长连接了，就会有一定概率致使某次请求恰好在连接释放后才能有返回，那不是一定会有这个问题存在么？所以是在并发不大的情况下，不需要开启长连接</font><br>最终暂时提高了keepalive_timeout的时长，减少此现象出现的概率，单本质上并未解决。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java程序线上cpu飙高(未完)</title>
    <link href="/2020/09/01/java%E7%A8%8B%E5%BA%8F%E7%BA%BF%E4%B8%8Acpu%E9%A3%99%E9%AB%98/"/>
    <url>/2020/09/01/java%E7%A8%8B%E5%BA%8F%E7%BA%BF%E4%B8%8Acpu%E9%A3%99%E9%AB%98/</url>
    
    <content type="html"><![CDATA[<p>线上系统出现8核cpu没核都达到100%，但是服务器并没有出现卡顿现象</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>通过top命令找到cpu高的pid<br>再通过top -Hp pid得到占用cpu高的对应线程，将其转为16进制tid<br>通过jstack pid|grep tid -C 10获取到占用cpu高的代码段  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">pool-<span class="hljs-number">9941</span>-thread-<span class="hljs-number">1</span><span class="hljs-string">&quot; #263208 prio=5 os_prio=0 tid=0x00007f565405b000 nid=0x1f78 runnable [0x00007f55502aa000]</span><br><span class="hljs-string">   java.lang.Thread.State: RUNNABLE</span><br><span class="hljs-string">at com.yunheit.sem.service.AdjustPricesService.keywordHourDownloadBaidu(AdjustPricesService.java:455)</span><br><span class="hljs-string">at com.yunheit.sem.service.AdjustPricesService$$FastClassBySpringCGLIB$$7a16392f.invoke(&lt;generated&gt;)</span><br><span class="hljs-string">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)</span><br><span class="hljs-string">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684)</span><br><span class="hljs-string">at com.yunheit.sem.service.AdjustPricesService$$EnhancerBySpringCGLIB$$f00dcb55.keywordHourDownloadBaidu(&lt;generated&gt;)</span><br><span class="hljs-string">at com.yunheit.sem.logic.AdjustPricesLogic.downloadFile(AdjustPricesLogic.java:103)</span><br><span class="hljs-string">at com.yunheit.sem.logic.SyncDispatchLogic.lambda$adjustPriceDispatch$0(SyncDispatchLogic.java:203)</span><br><span class="hljs-string">at com.yunheit.sem.logic.SyncDispatchLogic$$Lambda$870/383155331.call(Unknown Source)</span><br><span class="hljs-string">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="hljs-string">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="hljs-string">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="hljs-string">at java.lang.Thread.run(Thread.java:748)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>发现是一个循环造成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (flag) &#123;<br>   <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">50</span>) &#123;<br>               String status = iSemHandler.getReportStatus(account, reportId);<br>               <span class="hljs-keyword">if</span> (status.equals(<span class="hljs-string">&quot;3&quot;</span>)) &#123;<br>                   filePath = iSemHandler.getReportFilePath(account, reportId);<br>                   flag = <span class="hljs-keyword">false</span>;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   index += <span class="hljs-number">1</span>;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       Thread.sleep(<span class="hljs-number">3000</span>);<br>                   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                       log.error(e.getMessage());<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>抛开代码优雅程度不说，此代码的意图在于不断重试获取响应，每次重试无响应后sleep3秒。<br>while死循环确实会造成cpu飙高，但是加入了Thread.sleep，释放cpu资源，但是不释放锁，就不会造成cpu飙高，与当前现象似乎不一致。<br>继续分析jstack，发现出现此代码段的地方总共有37个。那是否是由于不断切换线程造成cpu使用过高呢？开始追代码了  </p><h2 id="问题定位，代码追踪"><a href="#问题定位，代码追踪" class="headerlink" title="问题定位，代码追踪"></a>问题定位，代码追踪</h2><p>使用了单线程池，结合现象想到了是否由于线程未释放导致出现了37个线程呢？  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService executorService = Executors.newSingleThreadExecutor();<br>Future&lt;String&gt; future = executorService.submit(task);<br><span class="hljs-keyword">try</span> &#123;<br>    String s = future.get(<span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>    XxlJobLogger.log(<span class="hljs-string">&quot;startAdjust:&quot;</span> + s);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>    XxlJobLogger.log(<span class="hljs-string">&quot;startAdjust:&quot;</span> + e.getMessage());<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    executorService.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>future.get(10, TimeUnit.MINUTES);</code>是一个阻塞方法，在指定的时间内会等待任务执行，超时则抛异常。<br><code>executorService.shutdown();</code>平滑的关闭ExecutorService，当此方法被调用时，ExecutorService停止接收新的任务并且等待已经提交的任务（包含提交正在执行和提交未执行）执行完成。当所有提交任务执行完毕，线程池即被关闭。<br>依据上面两条，确实可能会出现任务超时，但是没有完成，只是抛出异常，但是没有主动取消任务关闭线程。不过追踪日志未发现出现超时的异常，却出现了由于逻辑问题而造成的空指针异常。<code>java.lang.NullPointerException</code>.<br>线索到此又断了。<br><font color= red size=6>为什么jstack会定位到一个while中的if语句。</font><br><font color= red size=6>为什么服务器明明cpu全部飙满，缺未出现卡顿的现象。</font><br><font color= red size=6>如果不是由于逻辑导致cpu飙高，那是不是由于频繁GC导致的呢，但是看线程资源使用情况，确实是逻辑线程cpu使用率高</font>  </p><p>由于服务被同事重启了，为拿到内存信息，只能等再次出现此问题的时候继续定位。<br><font color=b size=6>未完待续。。。。  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jenkins部署oss</title>
    <link href="/2020/08/31/jenkins%E9%83%A8%E7%BD%B2oss/"/>
    <url>/2020/08/31/jenkins%E9%83%A8%E7%BD%B2oss/</url>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>公司业务需求有一部分动态js代码会频繁更新，为了避免每次更新都重新部署，则通过将js代码放入到oss上。但也遇到了以下几个问题  </p><ol><li>手动上传。  </li><li>测试与正式环境拆分不便利，每次都是在手动处理。  </li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过Jenkins部署和oss的命令行工具ossutil来完成</p><h3 id="需解决问题"><a href="#需解决问题" class="headerlink" title="需解决问题"></a>需解决问题</h3><ol><li>区分是文件部署还是上传静态文件</li><li>通过shell对oss的静态文件引用做替换，以达到不同环境引用不同地址的文件<h4 id="区分静态文件"><a href="#区分静态文件" class="headerlink" title="区分静态文件"></a>区分静态文件</h4>通过git命令和配置文件的配合<br>git获取本次提交的文件列表，与配置文件中的src_arr比对，如果命中则上传至对应的des_arr目录  </li></ol><p><code>注：若git发现没有新文件，则有可能是上次部署失败，即已拉取新文件，但没有执行后续上传，此时可能通过判断是否有新文件，如果没有则对比上次提交；但依旧无法避免上次提交失败，本次又有新提交的时候，导致上次静态文件更新没有上传，此问题还需有新解决方案</code></p><p>配置文件格式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#待上传文件目录  </span><br>src_arr=(src<span class="hljs-regexp">/static/img</span> src<span class="hljs-regexp">/static/</span>js)  <br><br><span class="hljs-comment">#上传路径  </span><br>des_arr=(tester_beta<span class="hljs-regexp">/static/img</span> tester_beta<span class="hljs-regexp">/static/img</span>)  <br><span class="hljs-comment">#应用路径  </span><br>src_path=()  <br><br><span class="hljs-comment">#替换路径  </span><br>des_path=()  <br></code></pre></td></tr></table></figure><p>执行脚本  </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/bin/bash -xe<br>whoami <br>groups<br>############################################################<br>#项目名称<br>PRJ_NAME=$&#123;JOB_NAME&#125;<br>cd ~/workspace/$&#123;JOB_NAME&#125;/<br><br><br>#bash $&#123;JENKINS_HOME&#125;/oss.sh $&#123;PRJ_NAME&#125;<br><br><br>#获取rebuild标示<br>#rebuild=$(cat ~/workspace/$&#123;JOB_NAME&#125;/rebuild)<br><br><br><br>source ~/workspace/$&#123;PRJ_NAME&#125;/oss.conf<br>rebuild=<span class="hljs-number">0</span><br>#遍历文件，判断是需要上传oss还是需要重新部署<br>#获取本次提交文件列表<br>files=$(git diff --name-only HEAD~ HEAD)<br><br>src_arr_len=$&#123;#src_arr[@]&#125;<br><br>des_arr_len=$&#123;#des_arr[@]&#125;<br>for file <span class="hljs-keyword">in</span> $files<br>do<br><br>  <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;$file&quot;</span> ];then<br>    #文件不存在，继续本次循环<br>    echo $file <br>  else<br><br>    for ((i=<span class="hljs-number">0</span>;i&lt;$src_arr_len;i++))<br>    do<br>      <br>      src=$&#123;src_arr[i]&#125;<br>      des=$&#123;des_arr[i]&#125;<br>      <br>      <br>      src_len=$&#123;#src&#125;<br>      f=$&#123;file:<span class="hljs-number">0</span>:$src_len&#125;<br>      <br>      <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;$f&quot;</span> ]] ;then<br>        echo <span class="hljs-string">&quot;空字符串&quot;</span><br>      elif [[ -z <span class="hljs-string">&quot;$src&quot;</span> ]] ;then<br>        echo <span class="hljs-string">&quot;空字符串&quot;</span><br>      #如果文件以src开头，则执行上传<br>      elif [[ <span class="hljs-string">&quot;$f&quot;</span> == <span class="hljs-string">&quot;$src&quot;</span> ]];then<br>        $&#123;JENKINS_HOME&#125;/ossutil --config-file=$&#123;JENKINS_HOME&#125;/oss_yunhe_static cp -f $file $des<br>      else<br>      #标记重新部署<br>          rebuild=<span class="hljs-number">1</span><br>      fi<br>      <br>    done<br>  fi<br>done<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;$rebuild&quot;</span> == <span class="hljs-number">0</span> ]]; then<br>   echo <span class="hljs-string">&quot;只上传oss&quot;</span><br>else<br>   echo <span class="hljs-string">&#x27;构建&#x27;</span><br>fi<br><br><br></code></pre></td></tr></table></figure><p><code>注:脚本开头使用的是#!/bin/bash -xe，处理#!/bin/bash 还必须有-xe，否则Jenkins不识别source，if等语法，至于为什么还不懂</code></p><h4 id="不同环境使用不同地址的文件"><a href="#不同环境使用不同地址的文件" class="headerlink" title="不同环境使用不同地址的文件"></a>不同环境使用不同地址的文件</h4><p>  例如<br>   <code>   本地开发直接引用本地文件    beta测试引用的是oss beta地址      正式环境引用的是oss 正式地址   </code><br>   前提要求前端对静态页面的引用路径做统一格式处理，设定全局变量path，脚本会根据环境替换此path</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>延时时间轮</title>
    <link href="/2020/08/28/%E5%BB%B6%E6%97%B6%E6%97%B6%E9%97%B4%E8%BD%AE/"/>
    <url>/2020/08/28/%E5%BB%B6%E6%97%B6%E6%97%B6%E9%97%B4%E8%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司项目中要求对事件做延迟处理，且延迟时间可配置。</p><h2 id="原解决办法"><a href="#原解决办法" class="headerlink" title="原解决办法"></a>原解决办法</h2><p>事件放入队列，因为一些历史原因，被放在了redis队列中。由一主线程定时遍历队列，对于到期事件进行处理。<br>此方案是最容易想到和实现的，但它有着明显的错误</p><ol><li>每次都要遍历全部事件，并对事件判断是否到期</li><li>若无序很可能会出现一个很久才要执行的事件被放在靠前位置</li><li>只有一个队列，随着事件的加入会无线变大，致使一次遍历越来越长，而导致快要处理的事件由于本次循环还未结束无法处理(当然这可以通过多线程遍历，和子线程执行方式解决)</li></ol><h2 id="思考解决方案"><a href="#思考解决方案" class="headerlink" title="思考解决方案"></a>思考解决方案</h2><p>第一时间想到的是是否可将事件按不同执行时间段分开存放，非常类似与hash负载均衡算法。</p><h2 id="延迟时间轮"><a href="#延迟时间轮" class="headerlink" title="延迟时间轮"></a>延迟时间轮</h2><p>在翻阅相关资料后，发现了延迟时间轮算法。个人总结为执行事件队列只维护一个固定周期的队列，而超过此周期的事件会被升级到上层时间轮，同时各上层时间轮，按自己间隔周期遍历自己时间轮，并将下一个周期的事件降级进入下级时间轮。<br><img src="/images/WX20200828-163543.png" alt="时间轮"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2020/08/28/docker/"/>
    <url>/2020/08/28/docker/</url>
    
    <content type="html"><![CDATA[<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo apt-get update<br>sudo curl -sSL https:<span class="hljs-regexp">//g</span>et.docker.com/ | sh<br><br><span class="hljs-comment">#检查是否安装成功</span><br>docker run hello-world<br><br>sudo curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.8.0/</span>docker-compose-`uname -s`-`uname -m` &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>sudo chmod a+x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h3 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h3><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/opt/</span>redis/data<br>vim <span class="hljs-regexp">/opt/</span>redis/Dockerfile<br>***************************<br>FROM debian:jessie<br><br><span class="hljs-comment"># add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added</span><br>RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis<br><br>RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \<br>                ca-certificates \<br>                wget \<br>        &amp;&amp; rm -rf <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/apt/</span>lists/*<br><br><span class="hljs-comment"># grab gosu for easy step-down from root</span><br>ENV GOSU_VERSION <span class="hljs-number">1.7</span><br>RUN set -x \<br>        &amp;&amp; wget -O <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>osu <span class="hljs-string">&quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)&quot;</span> \<br>        &amp;&amp; wget -O <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>osu.asc <span class="hljs-string">&quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc&quot;</span> \<br>        &amp;&amp; export GNUPGHOME=<span class="hljs-string">&quot;$(mktemp -d)&quot;</span> \<br>        &amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \<br>        &amp;&amp; gpg --batch --verify <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>osu.asc <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>osu \<br>        &amp;&amp; rm -r <span class="hljs-string">&quot;$GNUPGHOME&quot;</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>osu.asc \<br>        &amp;&amp; chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>osu \<br>        &amp;&amp; gosu nobody true<br><br>ENV REDIS_VERSION <span class="hljs-number">3.2</span>.<span class="hljs-number">0</span><br>ENV REDIS_DOWNLOAD_URL http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/releases/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz<br>ENV REDIS_DOWNLOAD_SHA1 <span class="hljs-number">0</span>c1820931094369c8cc19fc1be62f598bc5961ca<br><br><span class="hljs-comment"># for redis-sentinel see: http://redis.io/topics/sentinel</span><br>RUN buildDeps=<span class="hljs-string">&#x27;gcc libc6-dev make&#x27;</span> \<br>        &amp;&amp; set -x \<br>        &amp;&amp; apt-get update &amp;&amp; apt-get install -y <span class="hljs-variable">$buildDeps</span> --no-install-recommends \<br>        &amp;&amp; rm -rf <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/apt/</span>lists/* \<br>        &amp;&amp; wget -O redis.tar.gz <span class="hljs-string">&quot;$REDIS_DOWNLOAD_URL&quot;</span> \<br>        &amp;&amp; echo <span class="hljs-string">&quot;$REDIS_DOWNLOAD_SHA1 *redis.tar.gz&quot;</span> | sha1sum -c - \<br>        &amp;&amp; mkdir -p <span class="hljs-regexp">/usr/</span>src/redis \<br>        &amp;&amp; tar -xzf redis.tar.gz -C <span class="hljs-regexp">/usr/</span>src/redis --strip-components=<span class="hljs-number">1</span> \<br>        &amp;&amp; rm redis.tar.gz \<br>        &amp;&amp; make -C <span class="hljs-regexp">/usr/</span>src/redis \<br>        &amp;&amp; make -C <span class="hljs-regexp">/usr/</span>src/redis install \<br>        &amp;&amp; rm -r <span class="hljs-regexp">/usr/</span>src/redis \<br>        &amp;&amp; apt-get purge -y --auto-remove <span class="hljs-variable">$buildDeps</span><br><br>RUN mkdir <span class="hljs-regexp">/data &amp;&amp; chown redis:redis /</span>data<br>VOLUME /data<br>WORKDIR /data<br><br>COPY docker-entrypoint.sh <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>ENTRYPOINT [<span class="hljs-string">&quot;docker-entrypoint.sh&quot;</span>]<br><br>EXPOSE <span class="hljs-number">6379</span><br>CMD [ <span class="hljs-string">&quot;redis-server&quot;</span> ]<br>***************************<br>cd <span class="hljs-regexp">/opt/</span>redis<br>docker build . -t redis:<span class="hljs-number">3.2</span><br><br>docker run --name redis -v <span class="hljs-regexp">/work/</span>redis<span class="hljs-regexp">/data:/</span>data  --net=host -d redis  redis-server --appendonly yes<br></code></pre></td></tr></table></figure><h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">vim utf8mb4.cnf <br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span><br><span class="hljs-strong">[client]</span><br><span class="hljs-strong">default-character-set = utf8mb4</span><br><span class="hljs-strong">[mysql]</span><br><span class="hljs-strong">default-character-set = utf8mb4</span><br><span class="hljs-strong">[mysqld]</span><br><span class="hljs-strong">character-set-client-handshake = FALSE  # 忽略客户端的字符集，使用服务器的设置</span><br><span class="hljs-strong">character-set-server = utf8mb4</span><br><span class="hljs-strong">collation-server = utf8mb4<span class="hljs-emphasis">_unicode_</span>ci</span><br><span class="hljs-strong">**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br><br>vim Dockerfile <br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span><br><span class="hljs-strong">FROM mysql:5.6</span><br><span class="hljs-strong">COPY utf8mb4.cnf /etc/mysql/conf.d/</span><br><span class="hljs-strong">**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>docker build -t mysql<span class="hljs-emphasis">_utf-8 .</span><br><span class="hljs-emphasis">docker run --restart=always -d -v /work/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_</span>ROOT<span class="hljs-emphasis">_PASSWORD=daochi12e --name mysql mysql_</span>utf-8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux-config</title>
    <link href="/2020/08/28/linux-config/"/>
    <url>/2020/08/28/linux-config/</url>
    
    <content type="html"><![CDATA[<h2 id="开启root用户ssh"><a href="#开启root用户ssh" class="headerlink" title="开启root用户ssh"></a>开启root用户ssh</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sudo passwd root<br><span class="hljs-strong">****</span><br><br>sudo vim /etc/ssh/sshd<span class="hljs-emphasis">_config</span><br><span class="hljs-emphasis"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">PermitRootLogin yes</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">sudo service ssh restart</span></span></span></span></span><br></code></pre></td></tr></table></figure><h2 id="更新apt-get"><a href="#更新apt-get" class="headerlink" title="更新apt-get"></a>更新apt-get</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo cp <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list /</span>etc<span class="hljs-regexp">/apt/</span>sources.list.bak<br>sudo rm -rf <span class="hljs-regexp">/etc/</span>apt/sources.list<br>sudo vim <span class="hljs-regexp">/etc/</span>apt/sources.list<br>********************************************************************<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial main restricted<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-updates main restricted<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-updates universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-updates multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-security main restricted<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-security universe<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> xenial-security multiverse<br>********************************************************************<br>sudo apt-get update<br></code></pre></td></tr></table></figure><h2 id="安装java8"><a href="#安装java8" class="headerlink" title="安装java8"></a>安装java8</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo apt-get <span class="hljs-keyword">install</span> python-software-properties<br>sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> software-properties-common<br>sudo <span class="hljs-keyword">add</span>-apt-repository ppa:webupd8team/<span class="hljs-keyword">java</span><br>sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> <span class="hljs-keyword">oracle</span>-java8-installer<br><span class="hljs-keyword">java</span> -<span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><h2 id="安装openjdk"><a href="#安装openjdk" class="headerlink" title="安装openjdk"></a>安装openjdk</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">apt <span class="hljs-keyword">install</span> openjdk<span class="hljs-number">-8</span>-jdk-headless<br><span class="hljs-keyword">update</span>-alternatives <span class="hljs-comment">--list java</span><br></code></pre></td></tr></table></figure><h2 id="创建ssh"><a href="#创建ssh" class="headerlink" title="创建ssh"></a>创建ssh</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -P <span class="hljs-string">&quot;&quot;</span><br>cd ~<span class="hljs-regexp">/.ssh/</span> <br>cat id_rsa.pub &gt;&gt; authoried_keys<br></code></pre></td></tr></table></figure><h2 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">sudo vim /etc/hosts<br><span class="hljs-number">192.168.0.161</span>   server1<br><span class="hljs-number">192.168.0.162</span>   server2<br><span class="hljs-number">192.168.0.163</span>   server3<br><span class="hljs-number">192.168.0.164</span>   server4<br><span class="hljs-number">192.168.0.165</span>   server5<br><span class="hljs-number">192.168.0.166</span>   server6<br></code></pre></td></tr></table></figure><h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">vim /etc/network/<span class="hljs-built_in">int</span>erfaces<br>***************************<br><span class="hljs-built_in">auto</span> eth0<br>iface eth0 inet static<br>address <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.175</span><br>netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br>gateway <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>***************************<br>#配置DNS<br>sudo vim /etc/resolvconf/resolv.conf.d/base <br>***************************<br>nameserver <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>nameserver <span class="hljs-number">202.106</span><span class="hljs-number">.0</span><span class="hljs-number">.20</span><br>***************************<br>#对于能连接内网，无法连接网关的，有可能是mac地址不被识别，永久修改mac<br>vim /etc/network/<span class="hljs-built_in">int</span>erfaces<br>#添加固定mac，将前四位修改为<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>***************************<br>hwaddress ether <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:fc:e8:<span class="hljs-number">41</span>:<span class="hljs-number">74</span><br>***************************<br>#如果还无法连接外网，看路由表是否添加网关<br>route -n<br>#Kernel IP routing table<br>#Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>#<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>         <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>     <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> enp10s0<br>#<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>     <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>         <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> enp10s0<br></code></pre></td></tr></table></figure><h2 id="安装nodejs-npm-pm2"><a href="#安装nodejs-npm-pm2" class="headerlink" title="安装nodejs,npm,pm2"></a>安装nodejs,npm,pm2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> curl -sL https://deb.nodesource.com/setup_<span class="hljs-number">10</span>.x | sudo -E bash -<br><span class="hljs-attribute">sudo</span> apt-get install -y nodejs<br><span class="hljs-attribute">nodejs</span> -v<br><span class="hljs-attribute">npm</span><br><span class="hljs-attribute">sudo</span> npm install -g pm<span class="hljs-number">2</span>@<span class="hljs-number">2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="开启sftp"><a href="#开启sftp" class="headerlink" title="开启sftp"></a>开启sftp</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#创建sftp用户组</span><br>sudo groupadd ftpaccess<br><span class="hljs-section">#修改ssh配置</span><br>vim /etc/ssh/sshd<span class="hljs-emphasis">_config</span><br><span class="hljs-emphasis"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">Match Group ftpaccess</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">    ChrootDirectory %h</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">    AllowTcpForwarding no</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">    X11Forwarding no</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">    ForceCommand internal-sftp</span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">#添加用户</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">useradd -m $user -g ftpaccess -s /usr/sbin/nologin</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">passwd $user</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">chown root /home/$user</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">mkdir /home/$user/www</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">chown $user:ftpaccess /home/$user/www</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">echo &quot;$pw&quot; | passwd $user --stdin &gt; /dev/null 2&gt;&amp;1</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span></span></span></span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux-command-line</title>
    <link href="/2020/08/28/linux-command-line/"/>
    <url>/2020/08/28/linux-command-line/</url>
    
    <content type="html"><![CDATA[<h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><h3 id="奇偶行分离"><a href="#奇偶行分离" class="headerlink" title="奇偶行分离"></a>奇偶行分离</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">cat 途锐.csv |awk -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;if(NR%2==1) &#123;print $1&quot;,&quot;$2&#125;&#125;&#x27;</span>&gt; 途锐_JH_`date +<span class="hljs-meta">%</span>Y<span class="hljs-meta">%</span>m<span class="hljs-meta">%</span>d`.csv   <br>cat 途锐.csv |awk -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;if(NR%2==0) &#123;print $1&#125;&#125;&#x27;</span>&gt; 途锐_WL_`date +<span class="hljs-meta">%</span>Y<span class="hljs-meta">%</span>m<span class="hljs-meta">%</span>d`.csv  <br></code></pre></td></tr></table></figure><h3 id="按字段分离文件名"><a href="#按字段分离文件名" class="headerlink" title="按字段分离文件名"></a>按字段分离文件名</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">awk</span> -F&#x27;|&#x27; &#x27;&#123;if(NR==<span class="hljs-number">1</span>)&#123;name=$<span class="hljs-number">1</span>&#125;if(name != $<span class="hljs-number">1</span>)&#123;name=$<span class="hljs-number">1</span>&#125; print $<span class="hljs-number">2</span><span class="hljs-string">&quot;,&quot;</span>$<span class="hljs-number">3</span> &gt;name<span class="hljs-string">&quot;.csv&quot;</span> &#125;&#x27; temp.res.csv<br></code></pre></td></tr></table></figure><h3 id="awk-求和，第一列相同时累加第二列的值"><a href="#awk-求和，第一列相同时累加第二列的值" class="headerlink" title="awk 求和，第一列相同时累加第二列的值"></a>awk 求和，第一列相同时累加第二列的值</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">awk -F<span class="hljs-string">&quot;,&quot;</span> &#x27;&#123;<span class="hljs-keyword">sum</span>[<span class="hljs-variable">$1</span>]+=<span class="hljs-variable">$2&#125;</span>END&#123;<span class="hljs-keyword">for</span>(c <span class="hljs-keyword">in</span> <span class="hljs-keyword">sum</span>)&#123;<span class="hljs-keyword">print</span> c<span class="hljs-string">&quot;|&quot;</span><span class="hljs-keyword">sum</span>[c]&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="文件差集"><a href="#文件差集" class="headerlink" title="文件差集"></a>文件差集</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">awk</span> -F&#x27;,&#x27; &#x27;NR==FNR&#123; a[$<span class="hljs-number">1</span>]=$<span class="hljs-number">1</span> &#125; NR&gt;FNR&#123; if(a[$<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&quot;</span>)&#123; print $<span class="hljs-number">1</span>&#125;&#125;&#x27; Tiguan_<span class="hljs-number">20180528</span>_<span class="hljs-number">20180604</span> Tiguan_<span class="hljs-number">20180521</span>_<span class="hljs-number">20180527</span>.csv<br></code></pre></td></tr></table></figure><h3 id="文件交集"><a href="#文件交集" class="headerlink" title="文件交集"></a>文件交集</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">awk -F&#x27;\t&#x27; &#x27;NR==FNR&#123; arr[<span class="hljs-variable">$1</span>]=<span class="hljs-string">&quot;x&quot;</span> &#125; NR&gt;FNR&#123; <span class="hljs-keyword">if</span>(arr[<span class="hljs-variable">$1</span>]!=<span class="hljs-string">&quot;&quot;</span>)&#123; <span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-variable">$2</span> &#125; &#125;&#x27; a.txt b.txt<br></code></pre></td></tr></table></figure><h3 id="去重行"><a href="#去重行" class="headerlink" title="去重行"></a>去重行</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;!a[<span class="hljs-variable">$0</span>]++&#x27;</span> file<br></code></pre></td></tr></table></figure><h3 id="去重，字段转小写"><a href="#去重，字段转小写" class="headerlink" title="去重，字段转小写"></a>去重，字段转小写</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> <span class="hljs-number">20180628</span>_ajia.csv | awk &#x27;!a[$<span class="hljs-number">0</span>]++&#x27; | awk &#x27;&#123;print $<span class="hljs-number">1</span><span class="hljs-string">&quot;,&quot;</span>tolower($<span class="hljs-number">2</span>)&#125;&#x27; &gt; <span class="hljs-number">20180628</span>_ajia_uniq.csv    <br></code></pre></td></tr></table></figure><h3 id="打印倒数"><a href="#打印倒数" class="headerlink" title="打印倒数"></a>打印倒数</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> final_result<span class="hljs-number">20180630</span>.csv |head -n <span class="hljs-number">100</span>|awk -F<span class="hljs-string">&quot;,&quot;</span> &#x27;&#123;print $<span class="hljs-number">1</span><span class="hljs-string">&quot;,&quot;</span>$<span class="hljs-number">2</span><span class="hljs-string">&quot;,&quot;</span>$<span class="hljs-number">3</span><span class="hljs-string">&quot;,&quot;</span>$(NF-<span class="hljs-number">3</span>)<span class="hljs-string">&quot;,&quot;</span>$(NF-<span class="hljs-number">2</span>)<span class="hljs-string">&quot;,&quot;</span>$(NF-<span class="hljs-number">1</span>)&#125;&#x27;&gt; <span class="hljs-number">20180630</span>.csv<br></code></pre></td></tr></table></figure><h3 id="按列统计行数"><a href="#按列统计行数" class="headerlink" title="按列统计行数"></a>按列统计行数</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> a*_out_20181010.csv|awk -F&#x27;,&#x27; &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$3&#125;</span>&#x27;|<span class="hljs-keyword">sort</span>|uniq -c|awk &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$2</span><span class="hljs-string">&quot; &quot;</span><span class="hljs-variable">$3&#125;</span>&#x27;|less<br></code></pre></td></tr></table></figure><h3 id="取最后一列"><a href="#取最后一列" class="headerlink" title="取最后一列"></a>取最后一列</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$NF</span>&#125;&#x27;</span> <br></code></pre></td></tr></table></figure><h3 id="两个文件相同列"><a href="#两个文件相同列" class="headerlink" title="两个文件相同列"></a>两个文件相同列</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">awk</span> &#x27;NR==FNR&#123;a[$<span class="hljs-number">1</span>]++&#125;NR!=FNR&#123;if($<span class="hljs-number">1</span> in a)&#123;print&#125;&#125;&#x27; <span class="hljs-number">1114</span>.csv <span class="hljs-number">1128</span>.csv<br></code></pre></td></tr></table></figure><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sed</span> <span class="hljs-string">&#x27;s/原字符串/替换字符串/&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="判断字符串长度"><a href="#判断字符串长度" class="headerlink" title="判断字符串长度"></a>判断字符串长度</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">$</span><span class="hljs-template-tag">&#123;#<span class="hljs-name">str</span>&#125;</span><br></code></pre></td></tr></table></figure><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;beginDate:2&#125;</span> <span class="hljs-regexp">//</span>去掉前两位<br></code></pre></td></tr></table></figure><h3 id="替换指定位置字符"><a href="#替换指定位置字符" class="headerlink" title="替换指定位置字符"></a>替换指定位置字符</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">awk</span> &#x27;BEGIN&#123;FS=OFS=<span class="hljs-string">&quot;,&quot;</span>&#125;&#123;sub(/,/,<span class="hljs-string">&quot;;&quot;</span>,$<span class="hljs-number">32</span>)&#125;<span class="hljs-number">1</span>&#x27; file<br></code></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><h3 id="目录不存在则创建目录"><a href="#目录不存在则创建目录" class="headerlink" title="目录不存在则创建目录"></a>目录不存在则创建目录</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">user@</span><span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.131</span> <span class="hljs-string">&quot;[ -d /var/test ] &amp;&amp; echo ok || mkdir -p /var/test&quot;</span><br></code></pre></td></tr></table></figure><h2 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h2><h3 id="切分文件"><a href="#切分文件" class="headerlink" title="切分文件"></a>切分文件</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">split</span>  -b <span class="hljs-number">20</span>m -d -a <span class="hljs-number">3</span>   齐家_<span class="hljs-number">500</span>W.csv 齐家  <br></code></pre></td></tr></table></figure><h3 id="看各文件夹大小"><a href="#看各文件夹大小" class="headerlink" title="看各文件夹大小"></a>看各文件夹大小</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">du -h --<span class="hljs-built_in">max</span>-<span class="hljs-symbol">depth</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="获取文件夹下的文件名"><a href="#获取文件夹下的文件名" class="headerlink" title="获取文件夹下的文件名"></a>获取文件夹下的文件名</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">path</span>=<span class="hljs-variable">$1</span><br><span class="hljs-attribute">files</span>=$(ls <span class="hljs-variable">$path</span>)<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> <span class="hljs-variable">$files</span><br><span class="hljs-keyword">do</span><br>   echo <span class="hljs-variable">$filename</span> &gt;&gt; filename.txt<br>done<br></code></pre></td></tr></table></figure><h2 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h2><h3 id="查看磁盘UUID"><a href="#查看磁盘UUID" class="headerlink" title="查看磁盘UUID"></a>查看磁盘UUID</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -l <span class="hljs-regexp">/dev/</span>disk<span class="hljs-regexp">/by-uuid/</span><br></code></pre></td></tr></table></figure><h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.gz<br>　　解压<span class="hljs-number">1</span>：gunzip FileName.gz<br>　　解压<span class="hljs-number">2</span>：gzip -d FileName.gz<br>　　压缩：gzip FileName<br><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> 和 .tgz<br>　　解压：tar zxvf FileName<span class="hljs-selector-class">.tar</span>.gz<br>　　压缩：tar zcvf FileName<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> DirName<br>　　———————————————<br>.bz2<br>　　解压<span class="hljs-number">1</span>：bzip2 -d FileName.bz2<br>　　解压<span class="hljs-number">2</span>：bunzip2 FileName.bz2<br>　　压缩： bzip2 -z FileName<br><span class="hljs-selector-class">.tar</span>.bz2<br>　　解压：tar jxvf FileName<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> 或tar –bzip xvf FileName<span class="hljs-selector-class">.tar</span>.bz2<br>　　压缩：tar jcvf FileName<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> DirName<br>　　———————————————<br>.bz<br>　　解压<span class="hljs-number">1</span>：bzip2 -d FileName.bz<br>　　解压<span class="hljs-number">2</span>：bunzip2 FileName.bz<br>　　压缩：未知<br><span class="hljs-selector-class">.tar</span>.bz<br>　　解压：tar jxvf FileName<span class="hljs-selector-class">.tar</span>.bz<br>　　压缩：未知<br>　　———————————————<br>.Z<br>　　解压：uncompress FileName.Z<br>　　压缩：compress FileName<br><span class="hljs-selector-class">.tar</span>.Z<br>　　解压：tar Zxvf FileName<span class="hljs-selector-class">.tar</span>.Z<br>　　压缩：tar Zcvf FileName<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.Z</span> DirName<br>　　———————————————<br>.zip<br>　　解压：unzip FileName.zip<br>　　压缩：zip FileName<span class="hljs-selector-class">.zip</span> DirName<br>　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName<span class="hljs-selector-class">.zip</span> DirName<br>　　———————————————<br>.rar<br>　　解压：rar x FileName.rar<br>　　压缩：rar <span class="hljs-selector-tag">a</span> FileName<span class="hljs-selector-class">.rar</span> DirName<br></code></pre></td></tr></table></figure><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><h3 id="ps-amp-top"><a href="#ps-amp-top" class="headerlink" title="ps&amp;top"></a>ps&amp;top</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update &amp;&amp; apt-<span class="hljs-builtin-name">get</span> install -y procps<br></code></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update &amp;&amp; apt-<span class="hljs-builtin-name">get</span> install net-tools<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql-command-line</title>
    <link href="/2020/08/27/mysql-command-line/"/>
    <url>/2020/08/27/mysql-command-line/</url>
    
    <content type="html"><![CDATA[<h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>查看慢查询是否开启<br><code>show variables like &#39;%slow_query_log%&#39;;</code><br>开启慢查询<br><code>set global slow_query_log = 1;</code><br>显示慢查询阈值(单位秒)<br><code>show variables like &#39;%long_query%&#39;;</code><br>设置慢查询阈值<br>注意:设置后需要重新打开mysql客户端才能到最新的值<br><code>set global long_query_time = 0.8;</code>  </p><h2 id="死锁日志"><a href="#死锁日志" class="headerlink" title="死锁日志"></a>死锁日志</h2><p>查看死锁的日志是否开启<br><code>show variables like &quot;%innodb_print_all_deadlocks%&quot;;</code><br>开启记录死锁<br><code>set global innodb_print_all_deadlocks=1</code><br>查看死锁日志<br><code>show engine innodb status</code>  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>deadlock</title>
    <link href="/2020/08/27/mysql-deadlock/"/>
    <url>/2020/08/27/mysql-deadlock/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>公司mysql库偶尔会出现deadlock问题<br>Error: Error: update <code>think_settlement_day</code> set <code>total_payment</code> = 7500, <code>update_time</code> = 1598383500 where <code>group_id</code> = ‘40168’ and <code>date_time</code> = ‘2020-08-25’ and <code>total_payment_type</code> = 0 - Deadlock found when trying to get lock; try restarting transaction</p><h2 id="问题猜测"><a href="#问题猜测" class="headerlink" title="问题猜测"></a>问题猜测</h2><p>期初认为是由于多线程同时处理任务，出现并发更新的造成锁问题。<br>后确认业务逻辑未出现多线程处理，且报错来看是deadlock(死锁)，因此不是行锁更新问题。</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><h2 id="查看mysql官方文档对deadlock的说明"><a href="#查看mysql官方文档对deadlock的说明" class="headerlink" title="查看mysql官方文档对deadlock的说明"></a>查看mysql官方文档对deadlock的说明</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlocks.html">Deadlocks in InnoDB</a><br><code>A deadlock is a situation where different transactions are unable to proceed because each holds a lock that the other needs. Because both transactions are waiting for a resource to become available, neither ever release the locks it holds.</code><br>相互持有锁造成的，当时没能和问题直接建立联系，继续翻找资料。<br><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlocks-handling.html">How to Minimize and Handle Deadlocks</a><br><code>If you use locking reads (SELECT ... FOR UPDATE or SELECT ... LOCK IN SHARE MODE), try using a lower isolation level such as READ COMMITTED.</code><br>读锁(后续再详细学习下innodb的锁)，简单来说就是在对于增删改操作，<code>先将数据读取出来，再对数据进行修改</code>  </p><h2 id="查看死锁日志"><a href="#查看死锁日志" class="headerlink" title="查看死锁日志"></a>查看死锁日志</h2><p><code>show engine innodb status</code></p><h2 id="分析sql语句"><a href="#分析sql语句" class="headerlink" title="分析sql语句"></a>分析sql语句</h2><p><code>EXPLAIN update </code>think_settlement_day<code>set</code>total_payment<code>= 7500,</code>update_time<code>= 1598383500 where</code>group_id<code>= &#39;40168&#39; and</code>date_time<code>= &#39;2020-08-25&#39; and</code>total_payment_type<code> = 0</code><br><img src="/images/WX20200827-110220.png"><br>从mysql5.1开始，引入了 index merge 优化技术，对同一个表可以使用多个索引分别进行条件扫描。<br><a href="http://dev.mysql.com/doc/refman/5.7/en/index-merge-optimization.html">index merge</a><br><code>The Index Merge access method retrieves rows with multiple range scans and merges their results into one. This access method merges index scans from a single table only, not scans across multiple tables. The merge can produce unions, intersections, or unions-of-intersections of its underlying scans.</code><br>简单来说就是对一张表上做多个索引扫表，形成交集索引</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>读锁锁住了一些本次不会更新的记录，且恰恰是另外一条update要更新的语句，造成deadlock</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用组合索引<br>取消index merge 优化  </p><h2 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h2><p><a href="https://www.cnblogs.com/CtripDBA/p/10207784.html">MySQL DeadLock故障排查过程</a><br><a href="https://www.jianshu.com/p/38b13b8b3920">记录一次mysql死锁(患者为index merge)</a><br><a href="https://zhuanlan.zhihu.com/p/64435240">MySQL–index merge死锁案例详细分析</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
